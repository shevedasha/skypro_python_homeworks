{"name": "test_task_3", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: target frame detached\n  (failed to check if window was closed: disconnected: Unable to receive message from renderer)\n  (Session info: chrome=129.0.6668.101)\nStacktrace:\n\tGetHandleVerifier [0x00007FF695C6B095+29557]\n\t(No symbol) [0x00007FF695BDFA50]\n\t(No symbol) [0x00007FF695A9B399]\n\t(No symbol) [0x00007FF695A83E8B]\n\t(No symbol) [0x00007FF695A81D65]\n\t(No symbol) [0x00007FF695A825BF]\n\t(No symbol) [0x00007FF695A90F4E]\n\t(No symbol) [0x00007FF695AA9A1D]\n\t(No symbol) [0x00007FF695AAF5BA]\n\t(No symbol) [0x00007FF695A82D24]\n\t(No symbol) [0x00007FF695AA95A0]\n\t(No symbol) [0x00007FF695B38861]\n\t(No symbol) [0x00007FF695B16F33]\n\t(No symbol) [0x00007FF695AE116F]\n\t(No symbol) [0x00007FF695AE22D1]\n\tGetHandleVerifier [0x00007FF695F9C96D+3378253]\n\tGetHandleVerifier [0x00007FF695FE8497+3688311]\n\tGetHandleVerifier [0x00007FF695FDD1CB+3642539]\n\tGetHandleVerifier [0x00007FF695D2A6B6+813462]\n\t(No symbol) [0x00007FF695BEAB5F]\n\t(No symbol) [0x00007FF695BE6B74]\n\t(No symbol) [0x00007FF695BE6D10]\n\t(No symbol) [0x00007FF695BD5C1F]\n\tBaseThreadInitThunk [0x00007FF9D04A7374+20]\n\tRtlUserThreadStart [0x00007FF9D1EBCC91+33]", "trace": "def test_task_3():\n        driver = webdriver.Chrome()\n>       auth = Auth(driver)\n\n..\\07_lesson\\Task3\\test_task3.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nTask3\\Authorization.py:8: in __init__\n    self._driver.get(\"https://www.saucedemo.com/\")\n..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027B7FED9130>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"target frame detached\",\"message\":\"target frame detached\\\\n  (failed to ch...07FF695BD5C1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FF9D04A7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF9D1EBCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: target frame detached\nE         (failed to check if window was closed: disconnected: Unable to receive message from renderer)\nE         (Session info: chrome=129.0.6668.101)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF695C6B095+29557]\nE       \t(No symbol) [0x00007FF695BDFA50]\nE       \t(No symbol) [0x00007FF695A9B399]\nE       \t(No symbol) [0x00007FF695A83E8B]\nE       \t(No symbol) [0x00007FF695A81D65]\nE       \t(No symbol) [0x00007FF695A825BF]\nE       \t(No symbol) [0x00007FF695A90F4E]\nE       \t(No symbol) [0x00007FF695AA9A1D]\nE       \t(No symbol) [0x00007FF695AAF5BA]\nE       \t(No symbol) [0x00007FF695A82D24]\nE       \t(No symbol) [0x00007FF695AA95A0]\nE       \t(No symbol) [0x00007FF695B38861]\nE       \t(No symbol) [0x00007FF695B16F33]\nE       \t(No symbol) [0x00007FF695AE116F]\nE       \t(No symbol) [0x00007FF695AE22D1]\nE       \tGetHandleVerifier [0x00007FF695F9C96D+3378253]\nE       \tGetHandleVerifier [0x00007FF695FE8497+3688311]\nE       \tGetHandleVerifier [0x00007FF695FDD1CB+3642539]\nE       \tGetHandleVerifier [0x00007FF695D2A6B6+813462]\nE       \t(No symbol) [0x00007FF695BEAB5F]\nE       \t(No symbol) [0x00007FF695BE6B74]\nE       \t(No symbol) [0x00007FF695BE6D10]\nE       \t(No symbol) [0x00007FF695BD5C1F]\nE       \tBaseThreadInitThunk [0x00007FF9D04A7374+20]\nE       \tRtlUserThreadStart [0x00007FF9D1EBCC91+33]\n\n..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "start": 1729680185084, "stop": 1729680191984, "uuid": "97c83217-24cd-4edb-91d0-e168cceb064c", "historyId": "ea998b2a7fc6e4817323cd8d3664b18c", "testCaseId": "ea998b2a7fc6e4817323cd8d3664b18c", "fullName": "Task3.test_task3#test_task_3", "labels": [{"name": "parentSuite", "value": "Task3"}, {"name": "suite", "value": "test_task3"}, {"name": "host", "value": "zzZ"}, {"name": "thread", "value": "7148-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Task3.test_task3"}]}